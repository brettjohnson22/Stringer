@{
    ViewData["Title"] = "CreateKnot";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>CreateKnot</h2>

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Search Box</title>
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-8">
    <h3 class="text-center">Where are you? (Search for a location)</h3>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
                </div>
            <div class="col-md-2"></div>
        </div>
        </div>
    <script>
        function initAutocomplete() {
            var baseCamp = { lat: 43.0341, lng: -87.9117 };

            var map = new google.maps.Map(document.getElementById('map'), {
                center: baseCamp,
                zoom: 13,
                mapTypeId: 'roadmap',
                mapTypeControl: false
            });

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }
                    var icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25)
                    };

                    marker = new google.maps.Marker({
                        map: map,
                        icon: icon,
                        title: place.name,
                        position: place.geometry.location
                    });

                    marker.addListener('click', function (event) {
                        var infowindow = new google.maps.InfoWindow({
                            content: '<div><p></p><a id ="popButton" href="/Members/CheckIn?placeid=' + place.place_id + '">Check in at ' + place.name + '?</button></div>'
                        });
                        infowindow.setPosition(event.latLng);
                        infowindow.open(map);
                    });
                    markers.push(marker);

                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });

        };

    </script>
    @{
        var srcKey = "https://maps.googleapis.com/maps/api/js?key=" + APIKey.SecretKey + "&libraries=places&callback=initAutocomplete async defer";
    }

    <script src=@srcKey></script>

</body>
</html>
